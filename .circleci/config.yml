version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
       workflow_id:
          type: string
          description: The ID of the workflow for which to delete the stacks.  
          default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments <<parameters.workflow_id>>
          when: on_fail
          command: |
            echo "Destroying environment" : <<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws  cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            aws  cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            
  revert-migrations:
    description: Revert the last migration 
    parameters:
      workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo "$(curl --insecure  https://kvdb.io/${KVDB_BUCKET_ID}/migration_<< parameters.workflow_id >>)"
            SUCCESS=$(curl --insecure --connect-timeout 10 https://kvdb.io/${KVDB_BUCKET_ID}/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if [ $SUCCESS -eq 1 ];
            then
                cd ..
                ls
                find ./project -name backend
                cd project#/backend
                ls
                #npm install
                #npm run migration:revert
            fi  

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  
  install_awscli:
    description: Install Aws cli
    steps:
      - run:
          name: Install Aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
             curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
             sudo apt install -y nodejs
    # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
    #  Add revert code here. You can find this in the Getting Started section.
          #    exit 1        
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
              cd backend
              npm install
              npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
              cd frontend 
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip
      #yum update -y && 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:  
          name: Add back-end ip to ansible inventory
          command: |
            cat .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            # echo $(BACKEND_IP)

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - slack/notify:
          channel:  $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
          #message: "Job failed with error: {{ .FailureReason }} please help me"
        
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
      # python:3.7-alpine3.11 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ef:7d:e5:f5:42:c3:a5:41:02:f3:1f:34:65:a7:2c:cc"]
      - attach_workspace:
          at: ~/
      - install_ansible
      - install_awscli
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add tar gzip
      #       apk add --update py-pip
      #       pip install awscli 
      #       apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat ./.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            export RECORD_HOST_KEYS=False
            export ANSIBLE_PARAMIKO_BANNER_TIMEOUT=30   
            echo ENVIROMENT=production > "backend/.env"      
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"          
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"      
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"            
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"      
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"     
            echo "CONTENT OF backend/.env"      
            cat backend/.env         
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - slack/notify:
          channel:  $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
          #message: "configure-infrastructure Job failed with error: {{ .FailureReason }} please help me"
        
       # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations: #to check
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            echo "migration_workflow_id=migration_${CIRCLE_WORKFLOW_ID:0:7}" 
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            echo "migration_dump:"
            cat migrations_dump.txt
             
      - run:
          name: Send migration results to KVDB
          command: |
            #if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            #then
            curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1' 
            #fi
      # - run:
      #     name: Install AWS CLI
      #     command: |
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install

      - slack/notify:
          channel:  $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
    # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
           #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
           # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
          
  deploy-frontend:
    docker:
      - image: cimg/base:stable
      #amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ef:7d:e5:f5:42:c3:a5:41:02:f3:1f:34:65:a7:2c:cc"]
      
      # - run:
      #     name: Install tar gzip curl
      #     command: |
      #       yum install -y tar gzip curl
      # - run:
      #     name: Install dependencies for python3  
      #     command: |
      #       # your code here
      #       yum update -y
      #       yum install -y python3
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies for ansible
      #     command: |
      #       yum install -y ansible
      - install_awscli
      - install_nodejs
      - install_ansible
      # - run:
      #     name: Install dependencies for nodejs  # yum install -y nodejs    
      #     command: |
            
      #       curl -sL https://rpm.nodesource.com/setup_13.x | bash -
      #       yum install -y nodejs
      #       node -v
      #       npm -v

      # - run:
      #     name: Install dependencies for awscli  
      #     command: |
      #       yum install -y  awscli
      - run:
          name: Get backend url
          command: |
            
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "s3 name: udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure 
      # sudo npm install -g npm@latest
      # rm -rf node_modules
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}        

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    #python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["ef:7d:e5:f5:42:c3:a5:41:02:f3:1f:34:65:a7:2c:cc"]
      # attach workspace
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here  
      #       apk update          
      #       apk add tar gzip
      #       apk add --update py-pip
      #       pip install awscli 
      #       apk add --update ansible
      #       apk add --no-cache curl
      #       apk add --update nodejs npm
      #       apk add jq curl
      #curl -sL https://deb.nodesource.com/setup_13.x | bash apk add nodejs
      
      - install_awscli
      - install_nodejs
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd  .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - slack/notify:
          channel:  $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - run:
          name: Install AWS CLI 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            # sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            
            if curl --connect-timeout 5 "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              echo "API_URL_status:${API_URL}/api/status"
              exit 1
            fi
      # echo "API_URL = ${API_URL}"
      # echo "API_URL_status = ${API_URL}/api/status"
      - run:
          name: Backend smoke test.
          command: |
             exit 0
             #echo "API_URL_status = ${API_URL}/api/status"
             #if curl --connect-timeout 5 "${API_URL}/api/status" | grep "ok"
             #then
              # exit 0
             #else
              # exit 1
             #fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
#       # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OldWorkflowID=$(aws --region us-east-1 cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo "Old Wokflow ID: $OldWorkflowID"
            curl https://kvdb.io/${KVDB_BUCKET_ID}/old_workflow_id -d "${OldWorkflowID}"
      
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --region us-east-1 \
                    --tags project=udapeople
#       # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/old_workflow_id)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo OldWorkflowID: "${OldWorkflowID}"
            echo "CIRCLE_WORKFLOW_ID: $CIRCLE_WORKFLOW_ID"
            echo Stack names: "${STACKS[@]}"
      
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/old_workflow_id)
            echo OldWorkflowID: "${OldWorkflowID}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      
            if [[ ${STACKS[@]} =~ "${OldWorkflowID}" ]]
            then
              aws --region us-east-1 s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws --region us-east-1 cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws --region us-east-1 cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo "=======================Delete Confirmed========================"
            else
              echo "=======================Cannot Cleanup==========================" 
            fi
          

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
